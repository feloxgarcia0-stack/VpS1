name: Laboratorio Kali con Notificacion a Discord (CORREGIDO)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Crear Entorno Kali y Obtener SSH
        id: setup
        run: |
          echo "### Creando contenedor Kali..."
          docker run --rm -d --name kali kalilinux/kali-rolling tail -f /dev/null

          echo "### Instalando herramientas y tmate..."
          docker exec kali apt-get update
          docker exec kali apt-get install -yq tmate curl htop golang-go default-jdk nodejs npm nmap sqlmap 

          echo "### Configurando tmate sin barra verde..."
          docker exec kali bash -c "echo 'set -g status off' > /root/.tmate.conf"

          echo "### Obteniendo la conexión SSH..."
          tmate_ssh=$(docker exec kali tmate -S /tmp/tmate.sock new-session -d \; wait tmate-ready \; display -p '#{tmate_ssh}')
          
          echo "ssh_connection=$tmate_ssh" >> $GITHUB_OUTPUT
      
      # ¡EL PASO CORREGIDO!
      - name: Enviar Notificación a Discord
        env:
          # Guardamos la conexión en una variable de entorno para usarla de forma segura
          SSH_CONNECTION: ${{ steps.setup.outputs.ssh_connection }}
          # El webhook también va en una variable para más limpieza
          WEBHOOK_URL: "https://discord.com/api/webhooks/1398292786876387439/Vmc5Ms5ZoF7GYp8yVwKZV1Q6k1Ht97k5tRRDZOG9_TNJQndDzxHx-1XpZYAQrPjtQvmJ"
        run: |
          # Construimos el JSON de forma segura con printf. Esto evita errores de sintaxis de bash.
          JSON_PAYLOAD=$(printf '{"content": "✅ **Nueva VPS de Kali lista.**\\n\\nCopia y pega esto en Termux:\\n\\n`%s`"}' "$SSH_CONNECTION")
          
          # Ejecutamos curl con la variable. Las comillas dobles son cruciales.
          curl -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$WEBHOOK_URL"

      - name: Mantener viva la conexión
        run: sleep 21000
